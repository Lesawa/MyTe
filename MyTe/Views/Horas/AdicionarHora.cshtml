<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8">
    <title>Lançar Horas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        let currentStartDate = new Date();
        let currentQuinzena = 1;
        $(document).ready(function () {
            updateTableHeaders(currentStartDate, currentQuinzena);
            preencherHorasSalvas();
            $("body").on('input', 'input.hour-input', function () {
                calculateTotalHours();
            });
            $("#submitButton").on('click', function (event) {
                event.preventDefault();
                submitForm();
            });
        });

        function calculateTotalHours() {
            let total = 0;
            let daysInQuinzena = getDaysInQuinzena(currentStartDate, currentQuinzena);
            let columnTotals = Array(daysInQuinzena).fill(0);
            $("tr.data-row").each(function () {
                let rowTotal = 0;
                $(this).find("input.hour-input:visible").each(function (index) {
                    let val = parseFloat($(this).val()) || 0;
                    rowTotal += val;
                    columnTotals[index] += val;
                });
                $(this).find(".row-total").text(rowTotal);
                total += rowTotal;
            });
            $("#totalHours").text(total);
            columnTotals.forEach((colTotal, index) => {
                $(`#column-total-${index + 1}`).text(colTotal);
            });
        }

        function getDaysInQuinzena(startDate, quinzena) {
            if (quinzena === 1) {
                return 15;
            } else {
                let endOfMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                return endOfMonth.getDate() - 15;
            }
        }

        function validateHours() {
            let valid = true;
            let displayDate = new Date(currentStartDate);
            displayDate.setDate(currentQuinzena === 1 ? 1 : 16);
            let daysInQuinzena = getDaysInQuinzena(displayDate, currentQuinzena);
            for (let i = 0; i < daysInQuinzena; i++) {
                let dayOfWeek = displayDate.getDay();
                if (dayOfWeek !== 0 && dayOfWeek !== 6) {
                    let dayTotal = 0;
                    $(`input[data-day="${i + 1}"]`).each(function () {
                        dayTotal += parseFloat($(this).val()) || 0;
                    });
                    if (dayTotal < 8) {
                        valid = false;
                        $(`input[data-day="${i + 1}"]`).addClass("is-invalid");
                        $(`#invalid-feedback-${i + 1}`).show();
                    } else {
                        $(`input[data-day="${i + 1}"]`).removeClass("is-invalid");
                        $(`#invalid-feedback-${i + 1}`).hide();
                    }
                }
                displayDate.setDate(displayDate.getDate() + 1);
            }
            return valid;
        }

        function navigateQuinzena(quinzenaChange) {
            currentQuinzena += quinzenaChange;
            let minimumDate = new Date('2024-01-01');
            if (currentQuinzena < 1 && currentStartDate > minimumDate) {
                currentQuinzena = 2;
                currentStartDate.setMonth(currentStartDate.getMonth() - 1);
            } else if (currentQuinzena > 2) {
                currentQuinzena = 1;
                currentStartDate.setMonth(currentStartDate.getMonth() + 1);
            }
            if (currentStartDate >= minimumDate) {
                updateTableHeaders(currentStartDate, currentQuinzena);
                clearInputs();
                preencherHorasSalvas();
            } else {
                currentQuinzena -= quinzenaChange;
            }
        }

        function updateTableHeaders(startDate, quinzena) {
            let headers = "<th>WBS</th>";
            let displayDate = new Date(startDate);
            if (quinzena === 1) {
                displayDate.setDate(1);
            } else {
                displayDate.setDate(16);
            }
            let currentDate = new Date(displayDate);
            let daysInQuinzena = getDaysInQuinzena(currentDate, quinzena);
            for (let i = 0; i < daysInQuinzena; i++) {
                let dayName = currentDate.toLocaleString('pt-BR', { weekday: 'short' });
                let day = currentDate.getDate();
                headers += `<th>${dayName}<br />${day}</th>`;
                currentDate.setDate(currentDate.getDate() + 1);
            }

            $("#table-headers").html(headers);
            let columnTotalsRow = "<td><b>Total:</b></td>";
            for (let i = 1; i <= daysInQuinzena; i++) {
                columnTotalsRow += `<td id="column-total-${i}">0</td>`;
            }

            $("#column-totals").html(columnTotalsRow);
            let startDateFormatted = formatDate(displayDate);
            let endDate = new Date(displayDate);
            endDate.setDate(endDate.getDate() + daysInQuinzena - 1);
            let endDateFormatted = formatDate(endDate);

            $("#currentPeriod").text(`Período: ${startDateFormatted} a ${endDateFormatted}`);

            $("tr.data-row").each(function () {
                $(this).find("td").each(function (index) {
                    if (index < daysInQuinzena + 1) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });
            disableWeekendInputs(daysInQuinzena);
            calculateTotalHours();
        }

        function clearInputs() {
            $("input.hour-input").val('');
            calculateTotalHours();
        }

        function disableWeekendInputs(daysInQuinzena) {
            let displayDate = new Date(currentStartDate);
            displayDate.setDate(currentQuinzena === 1 ? 1 : 16);
            for (let i = 0; i < daysInQuinzena; i++) {
                let dayOfWeek = displayDate.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    $(`input[data-day="${i + 1}"]`).prop('disabled', true);
                } else {
                    $(`input[data-day="${i + 1}"]`).prop('disabled', false);
                }
                displayDate.setDate(displayDate.getDate() + 1);
            }
        }

                function formatDate(date) {
                let day = String(date.getDate()).padStart(2, '0');
                let month = String(date.getMonth() + 1).padStart(2, '0');
                let year = date.getFullYear();
                return `${day}/${month}/${year}`;
            }

                function preencherHorasSalvas() {
            let startDate = new Date(currentStartDate);
            if (currentQuinzena === 1) {
                startDate.setDate(1);
            } else {
                startDate.setDate(16);
            }
            let endDate = new Date(startDate);
            let daysInQuinzena = getDaysInQuinzena(startDate, currentQuinzena);
            endDate.setDate(startDate.getDate() + daysInQuinzena - 1);
            let formattedStartDate = formatDate(startDate);
            let formattedEndDate = formatDate(endDate);
            console.log(`Fetching horas salvas for period: ${formattedStartDate} to ${formattedEndDate}`);
            fetch(`/Horas/GetHorasSalvas?startDate=${formattedStartDate}&endDate=${formattedEndDate}`)
                .then(response => response.json())
                .then(horasSalvas => {
                    console.log("Received horas salvas:", horasSalvas);
                    if (horasSalvas.success) {
                        horasSalvas.data.forEach(hora => {
                            let data = new Date(hora.registroData);
                            let day = data.getDate();
                            let input = $(`input[data-day="${day}"][data-wbs="${hora.wbsId}"]`);
                            if (input.length > 0) {
                                input.val(hora.horasTrabalhadas);
                            }
                        });
                        calculateTotalHours();
                    } else {
                        console.error("Erro ao buscar horas salvas:", horasSalvas.message);
                    }
                })
                .catch(error => {
                    console.error("Erro ao buscar horas salvas:", error);
                });
        }

        function submitForm() {
            if (!validateHours()) {
                $(".error").show();
                return;
            }
            let horas = [];
            $("tr.data-row").each(function () {
                let wbsId = $(this).find("select").val();
                $(this).find("input.hour-input").each(function () {
                    if ($(this).val()) {
                        let dia = $(this).attr("data-day");
                        let data = new Date(currentStartDate.getFullYear(), currentStartDate.getMonth(), dia).toISOString();
                        horas.push({
                            WBSId: wbsId,
                            RegistroData: data,
                            HorasTrabalhadas: $(this).val()
                        });
                    }
                });
            });
            fetch("/Horas/AdicionarHora", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(horas)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $('#successModal').modal('show');
                        preencherHorasSalvas(); // Chamar a função para preencher as horas salvas
                    } else {
                        alert("Erro ao salvar horas. Tente novamente.");
                    }
                })
                .catch(error => {
                    console.error("Erro:", error);
                    alert("Erro ao salvar horas. Tente novamente.");
                });
        }
    </script>   
</head>

<body class="Quinzena">
    <div class="container">
        <div class="center-text">
            <br />
            <h1 class="mb-4" style="font-weight: bold; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2); color: #890078;">Registre suas horas:</h1>

        </div>

        <div class="d-flex justify-content-end">
            <button id="submitButton" type="button" class="btn btn-success me-2">Incluir horas</button>
            <button id="novoBotao" type="button" class="btn btn-dark">Consultar</button>
            <script>
                document.getElementById("novoBotao").addEventListener("click", function () {
                    window.location.href = "/Horas/ListarHoras";
                });
            </script>
        </div>
        <br />
        <!-- Modal de sucesso -->
        <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="custom-modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="successModalLabel">Salvo com sucesso</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        As horas foram registradas com sucesso.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-dark" data-bs-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>
        <form>
            <div>
                <table class="tabelas">
                    <thead>
                        <tr id="table-headers"></tr>
                    </thead>
                    <tbody>
                        @for (int row = 0; row < 4; row++)
                        {
                            <tr class="data-row">
                                <td>
                                    <div class="col col-lg wbs-column">
                                        <select class="form-select">
                                            <option value="0">Selecione</option>
                                            @foreach (var wbs in (SelectList)ViewBag.ListaDeWBS)
                                            {
                                                <option value="@wbs.Value">@wbs.Text</option>
                                            }
                                        </select>
                                    </div>
                                </td>
                                @for (int col = 1; col <= 31; col++) // Ajustado para lidar com até 31 dias
                                {
                                    <td class="col col-lg">
                                        <input type="text" class="form-control hour-input" data-day="@col" />
                                    </td>
                                }
                            </tr>
                        }
                        <tr id="column-totals"></tr>
                        <tr>
                            <td colspan="31" class="text-end">
                                <!-- Ajustado para lidar com até 31 dias -->
                                <strong>Total de horas: <span id="totalHours">0</span></strong>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="error">Cada dia útil deve ter pelo menos 8 horas registradas.</div>
            </div>
            <div class="text-center mt-3">
                <h5 id="currentPeriod"></h5>
                <button class="btn btn-dark" type="button" onclick="navigateQuinzena(-1)">← Quinzena Anterior</button>
                <button class="btn btn-dark" type="button" onclick="navigateQuinzena(1)">Próxima Quinzena →</button>
            </div>
        </form>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12xmeP6K7ak3HBdL6EX13Jk5yzY3XORtpaEyyYozPXybc+LD" crossorigin="anonymous"></script>

</body>
</html>